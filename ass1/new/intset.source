CREATE FUNCTION intset_in(cstring)
RETURNS intset
AS '_OBJWD_/intset'
LANGUAGE C IMMUTABLE STRICT;



CREATE FUNCTION intset_out(intset)
RETURNS cstring
AS '_OBJWD_/intset'
LANGUAGE C IMMUTABLE STRICT;


CREATE TYPE intset (
INTERNALLENGTH = VARIABLE,
input = intset_in,
output = intset_out
);

CREATE FUNCTION intset_difference(intset, intset)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR - (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_difference,
   commutator = -
);



CREATE FUNCTION intset_intersection(intset, intset)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR && (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_intersection,
   commutator = &&
);


CREATE FUNCTION intset_union(intset, intset)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR || (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_union,
   commutator = ||
);

CREATE FUNCTION intset_disjunction(intset, intset)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR !! (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_disjunction,
   commutator = !!
);

CREATE FUNCTION contain_intger(int, intset)
RETURNS bool
AS '_OBJWD_/intset'
LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR <@ (
leftarg = int4,
rightarg = intset,
procedure = contain_intger,
commutator = <@
);

CREATE FUNCTION contain_intset(intset, intset)
RETURNS bool
AS '_OBJWD_/intset'
LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR @> (
leftarg = intset,
rightarg = intset,
procedure = contain_intset,
commutator = @>
);

CREATE FUNCTION compare_equal(intset, intset)
RETURNS bool
AS '_OBJWD_/intset'
LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR = (
leftarg = intset,
rightarg = intset,
procedure = compare_equal,
commutator = =
);

CREATE FUNCTION length(intset)
RETURNS int4
AS '_OBJWD_/intset'
LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR @ (
rightarg = intset,
procedure = length,
commutator = @
);





















